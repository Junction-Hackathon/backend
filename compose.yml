services:
  zookeeper:
    networks:
      - app-network
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_EXTERNAL://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_EXTERNAL://10.42.0.174:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    networks:
      - app-network
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  server:
    image: portals-core-api
    build:
      context: .
    environment:
      NODE_ENV: developement
      TSC_WATCHFILE: UsePolling
    networks:
      - app-network
    env_file:
      - .env.docker
    ports:
      - 3000:3000
      - 5555:5555
    volumes:
      - ./src:/app/src
      - ./prisma/migrations:/app/prisma/migrations
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      search:
        condition: service_healthy
    command: >
      sh -c "pnpm dlx prisma migrate deploy &&
      pnpm run start:dev"

  db:
    networks:
      - app-network
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=dba7
      - POSTGRES_DB=main
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dba7 -d main']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  redis:
    networks:
      - app-network
    image: redis/redis-stack
    restart: always
    expose:
      - 6379
      - 8001
    ports:
      - 6379:6379
      - 8001:8001
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  search:
    networks:
      - app-network
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200']
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=portals
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - '9200:9200'

networks:
  app-network:
    driver: bridge
