services:
  zookeeper:
    networks:
      - kafka-shared
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      zookeeper_client_port: 2181
      zookeeper_tick_time: 2000

  kafka:
    networks:
       - kafka-shared
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      kafka_broker_id: 1
      kafka_zookeeper_connect: zookeeper:2181
      kafka_listener_security_protocol_map: plaintext:plaintext,plaintext_internal:plaintext,plaintext_external:plaintext
      kafka_listeners: plaintext://0.0.0.0:9092,plaintext_internal://0.0.0.0:29092,plaintext_external://0.0.0.0:19092
      kafka_advertised_listeners: plaintext://kafka:9092,plaintext_internal://kafka:29092,plaintext_external://10.42.0.174:19092
      kafka_inter_broker_listener_name: plaintext_internal
      kafka_offsets_topic_replication_factor: 1

  kafka-ui:
    networks:
      -  kafka-shared
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      kafka_clusters_0_name: local
      kafka_clusters_0_bootstrapservers: kafka:9092
      kafka_clusters_0_zookeeper: zookeeper:2181

  server:
    image: portals-core-api
    build:
      context: .
    environment:
      node_env: developement
      tsc_watchfile: usepolling
    networks:
      - app-network
    env_file:
      - .env.docker
    ports:
      - 3000:3000
      - 5555:5555
    volumes:
      - ./src:/app/src
      - ./prisma/migrations:/app/prisma/migrations
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      search:
        condition: service_healthy
    command: >
      sh -c "pnpm dlx prisma migrate deploy &&
      pnpm run start:dev"

  db:
    networks:
      - app-network
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - postgres_password=pass
      - postgres_user=dba7
      - postgres_db=main
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -u dba7 -d main']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  redis:
    networks:
      - app-network
    image: redis/redis-stack
    restart: always
    expose:
      - 6379
      - 8001
    ports:
      - 6379:6379
      - 8001:8001
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  search:
    networks:
      - app-network
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200']
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - discovery.type=single-node
      - elastic_password=portals
      - xpack.security.enabled=false
      - es_java_opts=-xms1g -xmx1g
    ports:
      - '9200:9200'

networks:
  kafka-shared:
    external: true
  app-network:
    driver: bridge
