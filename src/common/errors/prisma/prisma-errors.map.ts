export const PrismaClientInitializationErrorMap = {
  // Errors related to database connection, authentication, and initialization failures
  P1000: { message: 'Authentication failed', statusCode: 401 },
  P1001: { message: 'Database server is unreachable', statusCode: 503 },
  P1002: { message: 'Database connection timed out', statusCode: 504 },
  P1003: { message: 'Database does not exist', statusCode: 404 },
  P1008: { message: 'Operation timed out', statusCode: 504 },
  P1009: { message: 'Database already exists', statusCode: 409 },
  P1010: { message: 'User access denied', statusCode: 403 },
  P1011: { message: 'TLS connection error', statusCode: 502 },
  P1012: { message: 'Schema validation error', statusCode: 400 },
  P1013: { message: 'Invalid database connection string', statusCode: 400 },
  P1014: { message: 'Underlying model error', statusCode: 500 },
  P1015: { message: 'Database version not supported', statusCode: 400 },
  P1016: { message: 'Incorrect parameters provided', statusCode: 400 },
  P1017: { message: 'Server closed the connection', statusCode: 503 },
} as const;

export const PrismaClientKnownRequestErrorMap = {
  // Errors related to Prisma Client and known request failures
  P2000: { message: 'Value too long for column', statusCode: 400 },
  P2001: { message: 'Record does not exist', statusCode: 404 },
  P2002: { message: 'Unique constraint violation', statusCode: 409 },
  P2003: { message: 'Foreign key constraint violation', statusCode: 409 },
  P2004: { message: 'Database constraint violation', statusCode: 409 },
  P2005: { message: 'Invalid field value provided', statusCode: 400 },
  P2006: { message: 'Invalid value provided', statusCode: 400 },
  P2007: { message: 'Data validation error', statusCode: 400 },
  P2008: { message: 'Query parsing error', statusCode: 400 },
  P2009: { message: 'Query validation error', statusCode: 400 },
  P2010: { message: 'Raw query execution failed', statusCode: 500 },
  P2011: { message: 'Null constraint violation', statusCode: 400 },
  P2012: { message: 'Missing required value', statusCode: 400 },
  P2013: { message: 'Missing required argument', statusCode: 400 },
  P2014: { message: 'Relation violation', statusCode: 409 },
  P2015: { message: 'Related record not found', statusCode: 404 },
  P2016: { message: 'Query interpretation error', statusCode: 400 },
  P2017: { message: 'Records not connected', statusCode: 400 },
  P2018: { message: 'Connected records not found', statusCode: 404 },
  P2019: { message: 'Input error', statusCode: 400 },
  P2020: { message: 'Value out of range', statusCode: 400 },
  P2021: { message: 'Table does not exist', statusCode: 404 },
  P2022: { message: 'Column does not exist', statusCode: 404 },
  P2023: { message: 'Inconsistent column data', statusCode: 400 },
  P2024: { message: 'Connection pool timeout', statusCode: 503 },
  P2025: { message: 'Record not Found', statusCode: 404 },
  P2026: { message: 'Unsupported feature', statusCode: 501 },
  P2027: { message: 'Database query execution errors', statusCode: 500 },
  P2028: { message: 'Transaction API error', statusCode: 500 },
  P2030: { message: 'Fulltext index not found', statusCode: 404 },
  P2031: { message: 'MongoDB replica set error', statusCode: 503 },
  P2033: { message: 'Number out of range', statusCode: 400 },
  P2034: { message: 'Transaction conflict', statusCode: 409 },
} as const;
export const PrismaClientValidationErrorMap = {
  // Errors related to Prisma Client validation failures
  P2005: { message: 'Invalid field value provided', statusCode: 400 },
  P2006: { message: 'Invalid value provided', statusCode: 400 },
  P2007: { message: 'Data validation error', statusCode: 400 },
  P2008: { message: 'Query parsing error', statusCode: 400 },
  P2009: { message: 'Query validation error', statusCode: 400 },
  P2012: { message: 'Missing required value', statusCode: 400 },
  P2013: { message: 'Missing required argument', statusCode: 400 },
  P2019: { message: 'Input error', statusCode: 400 },
  P2020: { message: 'Value out of range', statusCode: 400 },
} as const;

export const PrismaClientUnknownRequestErrorMap = {
  // Errors related to unknown Prisma Client request failures
  P2025: { message: 'Operation failed', statusCode: 400 },
  P2027: { message: 'Database query execution errors', statusCode: 500 },
  P2028: { message: 'Transaction API error', statusCode: 500 },
  P2034: { message: 'Transaction conflict', statusCode: 409 },
} as const;

export const PrismaClientRustPanicErrorMap = {
  // Errors related to Prisma Client Rust panic errors
  P3000: { message: 'Database creation failed', statusCode: 500 },
  P3001: { message: 'Migration contains destructive changes', statusCode: 409 },
  P3002: { message: 'Migration rollback failed', statusCode: 500 },
  P3003: { message: 'Migration format changed', statusCode: 400 },
  P3004: { message: 'System database alteration error', statusCode: 500 },
  P3005: { message: 'Non-empty schema error', statusCode: 409 },
  P3006: { message: 'Migration failed', statusCode: 500 },
  P3007: { message: 'Preview features blocked', statusCode: 403 },
  P3008: { message: 'Migration already applied', statusCode: 409 },
  P3009: { message: 'Failed migrations error', statusCode: 500 },
  P3010: { message: 'Migration name too long', statusCode: 400 },
  P3011: { message: 'Migration not found for rollback', statusCode: 404 },
  P3012: { message: 'Migration not in failed state', statusCode: 400 },
  P3013: { message: 'Provider arrays not supported', statusCode: 400 },
  P3014: { message: 'Shadow database creation error', statusCode: 500 },
  P3015: { message: 'Migration file not found', statusCode: 404 },
  P3016: { message: 'Database reset fallback failed', statusCode: 500 },
  P3017: { message: 'Migration not found', statusCode: 404 },
  P3018: { message: 'Migration failed to apply', statusCode: 500 },
  P3019: { message: 'Provider mismatch', statusCode: 400 },
  P3020: { message: 'Shadow database disabled', statusCode: 400 },
  P3021: { message: 'No foreign keys error', statusCode: 400 },
  P3022: { message: 'No direct DDL error', statusCode: 400 },
}
